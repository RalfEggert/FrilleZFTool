<?php
namespace ZFTool\Generator;

use Zend\Code\Generator\AbstractGenerator;
use Zend\Code\Generator\ClassGenerator;
use Zend\Code\Generator\DocBlock\Tag;
use Zend\Code\Generator\DocBlockGenerator;
use Zend\Code\Generator\Exception\RuntimeException as GeneratorException;
use Zend\Code\Generator\FileGenerator;
use Zend\Code\Generator\MethodGenerator;
use Zend\Code\Generator\ParameterGenerator;
use Zend\Code\Generator\ValueGenerator;
use Zend\Code\Reflection\FileReflection;
use ZFTool\Options\RequestOptions;

/**
 * Class ModuleGenerator
 *
 * @package ZFTool\Generator
 */
class ModuleGenerator
{
    /**
     * @var boolean
     */
    protected $flagCreateDocBlocks = true;
    /**
     * @var RequestOptions
     */
    protected $requestOptions;

    /**
     * @param $requestOptions
     */
    function __construct(RequestOptions $requestOptions)
    {
        $this->requestOptions = $requestOptions;

        // change doc block flag
        $this->flagCreateDocBlocks = !$this->requestOptions->getFlagNoDocBlocks();
    }

    /**
     * Create module configuration
     *
     * @param array $configData
     *
     * @return bool
     */
    public function createConfiguration(array $configData = array())
    {
        // get needed options to shorten code
        $modulePath = $this->requestOptions->getModulePath();
        $configFile = $modulePath . '/config/module.config.php';

        // create config array
        $array = new ValueGenerator();
        $array->initEnvironmentConstants();
        $array->setValue($configData);
        $array->setArrayDepth(0);

        // create file with file generator
        $file = new FileGenerator();
        $file->setBody(
            'return ' . $array->generate() . ';' . AbstractGenerator::LINE_FEED
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'Configuration file generated by FrilleZFTool',
                    null,
                    array(
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write application configuration
        if (!file_put_contents($configFile, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Create controller class
     *
     * @return bool
     */
    public function createController()
    {
        // get needed options to shorten code
        $moduleName         = $this->requestOptions->getModuleName();
        $controllerClass    = $this->requestOptions->getControllerClass();
        $controllerPath     = $this->requestOptions->getControllerPath();
        $controllerFile     = $this->requestOptions->getControllerFile();
        $controllerFilePath = $controllerPath . $controllerFile;

        // create controller class with class generator
        $code = new ClassGenerator();
        $code->setNamespaceName($moduleName . '\Controller');
        $code->addUse('Zend\Mvc\Controller\AbstractActionController');
        $code->addUse('Zend\View\Model\ViewModel');
        $code->setName($controllerClass);
        $code->setExtendedClass('AbstractActionController');
        $code->addMethodFromGenerator(
            $this->generateActionMethod('indexAction')
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $code->setDocBlock(
                new DocBlockGenerator(
                    'Class ' . $controllerClass,
                    'Please add a proper description for the '
                    . $controllerClass,
                    array(
                        $this->generatePackageTag($moduleName),
                    )
                )
            );
        }

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'This file was generated by FrilleZFTool.',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write controller class
        if (!file_put_contents($controllerFilePath, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Create controller factory
     *
     * @return bool
     */
    public function createControllerFactory()
    {
        // get needed options to shorten code
        $moduleName         = $this->requestOptions->getModuleName();
        $controllerClass    = $this->requestOptions->getControllerClass();
        $controllerPath     = $this->requestOptions->getControllerPath();
        $factoryClass       = $controllerClass . 'Factory';
        $factoryFile        = $factoryClass . '.php';
        $factoryFilePath    = $controllerPath . $factoryFile;

        // check for factory class
        if (file_exists($factoryFilePath)) {
            throw new GeneratorException(
                'The factory for this controller exists already.'
            );
        }

        // create controller class with class generator
        $code = new ClassGenerator();
        $code->setNamespaceName($moduleName . '\Controller');
        $code->addUse('Zend\ServiceManager\FactoryInterface');
        $code->addUse('Zend\ServiceManager\ServiceLocatorInterface');
        $code->setName($factoryClass);
        $code->setImplementedInterfaces(array('FactoryInterface'));
        $code->addMethodFromGenerator(
            $this->generateCreateServiceMethod(
                $controllerClass, 'controllerLoader'
            )
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $code->setDocBlock(
                new DocBlockGenerator(
                    'Factory for ' . $controllerClass,
                    'Please add a proper description for the '
                    . $controllerClass . ' factory',
                    array(
                        $this->generatePackageTag($moduleName),
                    )
                )
            );
        }

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'This file was generated by FrilleZFTool.',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write controller class
        if (!file_put_contents($factoryFilePath, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Create the Module.php content
     *
     * @return string
     */
    public function createModule()
    {
        // get needed options to shorten code
        $moduleName    = $this->requestOptions->getModuleName();
        $modulePath    = $this->requestOptions->getModulePath();
        $moduleFile    = $modulePath . '/Module.php';
        $moduleViewDir = $this->requestOptions->getModuleViewDir();

        // create dirs
        mkdir($modulePath . '/config', 0777, true);
        mkdir($modulePath . '/src/' . $moduleName . '/Controller', 0777, true);
        mkdir($modulePath . '/view/' . $moduleViewDir, 0777, true);

        // create controller class with class generator
        $code = new ClassGenerator();
        $code->setNamespaceName($moduleName);
        $code->setName('Module');
        $code->addMethodFromGenerator($this->generateGetConfigMethod());
        $code->addMethodFromGenerator(
            $this->generateGetAutoloaderConfigMethod()
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $code->setDocBlock(
                new DocBlockGenerator(
                    'Module',
                    'Please add a proper description for the '
                    . $moduleName . ' module',
                    array(
                        $this->generatePackageTag($moduleName),
                    )
                )
            );
        }

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'This file was generated by FrilleZFTool.',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write controller class
        if (!file_put_contents($moduleFile, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Create view script
     *
     * @return bool
     */
    public function createViewScript()
    {
        // get needed options to shorten code
        $moduleName         = $this->requestOptions->getModuleName();
        $controllerName     = $this->requestOptions->getControllerName();
        $actionName         = $this->requestOptions->getActionName();
        $actionViewPath     = $this->requestOptions->getActionViewPath();
        $controllerViewPath = $this->requestOptions->getControllerViewPath();

        // create dir if not exists
        if (!file_exists($controllerViewPath)) {
            mkdir($controllerViewPath, 0777, true);
        }

        // setup view script body
        $viewBody   = array();
        $viewBody[] = '?>';
        $viewBody[] = '<div class="jumbotron">';
        $viewBody[] = '<h1>Action "' . $actionName . '"</h1>';
        $viewBody[] = '<p>Created for Controller "' . $controllerName
            . '" in Module "' . $moduleName . '"</p>';
        $viewBody[] = '</div>';

        // create file with file generator
        $file = new FileGenerator();
        $file->setBody(
            implode(AbstractGenerator::LINE_FEED, $viewBody)
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'View script generated by FrilleZFTool',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                    )
                )
            );
        }

        // write view script
        if (!file_put_contents($actionViewPath, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * @param array $configData
     * @param       $configFile
     * @param boolean $align
     *
     * @return bool
     */
    public function updateConfiguration(
        array $configData, $configFile, $align = false
    )
    {
        // set old file
        $oldFile = str_replace('.php', '.old', $configFile);

        // copy to old file
        if (file_exists($configFile)) {
            copy($configFile, $oldFile);
        }

        // create config array
        $array = new ValueGenerator();
        $array->initEnvironmentConstants();
        $array->setValue($configData);
        $array->setArrayDepth(0);

        // generate body
        $body = 'return ' . $array->generate() . ';'
            . AbstractGenerator::LINE_FEED;

        // check for alignment
        if ($align) {
            // Align "=>" operators to match coding standard
            preg_match_all('(\n\s+([^=]+)=>)', $body, $matches, PREG_SET_ORDER);
            $maxWidth = 0;

            foreach ($matches as $match) {
                $maxWidth = max($maxWidth, strlen($match[1]));
            }

            $body = preg_replace(
                '(\n\s+([^=]+)=>)e',
                "'\n    \\1' . str_repeat(' ', " . $maxWidth . " - strlen('\\1')) . '=>'",
                $body
            );
        }

        // create file with file generator
        $file = new FileGenerator();
        $file->setBody($body);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'Configuration file generated by FrilleZFTool',
                    'The previous configuration file is stored in ' . $oldFile,
                    array(
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write application configuration
        if (!file_put_contents($configFile, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Update controller class with new action
     *
     * @return bool
     * @throws \Zend\Code\Generator\Exception
     */
    public function updateController()
    {
        // get needed options to shorten code
        $moduleName         = $this->requestOptions->getModuleName();
        $controllerKey      = $this->requestOptions->getControllerKey();
        $controllerPath     = $this->requestOptions->getControllerPath();
        $controllerFile     = $this->requestOptions->getControllerFile();
        $actionMethod       = $this->requestOptions->getActionMethod();
        $controllerFilePath = $controllerPath . $controllerFile;

        // get file and class reflection
        $fileReflection  = new FileReflection(
            $controllerFilePath,
            true
        );
        $classReflection = $fileReflection->getClass(
            $controllerKey . 'Controller'
        );

        // setup class generator with reflected class
        $code = ClassGenerator::fromReflection($classReflection);

        // check for action method
        if ($code->hasMethod($actionMethod)) {
            throw new GeneratorException(
                'New action already exists within controller'
            );
        }

        // fix namespace usage
        $code->addUse('Zend\Mvc\Controller\AbstractActionController');
        $code->addUse('Zend\View\Model\ViewModel');
        $code->setExtendedClass('AbstractActionController');
        $code->addMethodFromGenerator(
            $this->generateActionMethod($actionMethod)
        );

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'This file was generated by FrilleZFTool.',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write controller class
        if (!file_put_contents($controllerFilePath, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Update module class with class map autoloading
     *
     * @return bool
     * @throws \Zend\Code\Generator\Exception
     */
    public function updateModuleWithClassmapAutoloader()
    {
        // get needed options to shorten code
        $path        = realpath($this->requestOptions->getPath());
        $directory   = $this->requestOptions->getDirectory();
        $destination = $this->requestOptions->getDestination();
        $moduleFile  = $directory . '/Module.php';
        $moduleClass = str_replace($path . '/module/', '', $directory) . '\Module';
        $moduleName  = str_replace($path . '/module/', '', $directory);

        // get file and class reflection
        $fileReflection  = new FileReflection($moduleFile, true);
        $classReflection = $fileReflection->getClass($moduleClass);

        // setup class generator with reflected class
        $code = ClassGenerator::fromReflection($classReflection);

        // check for action method
        if ($code->hasMethod('getAutoloaderConfig')) {
            $code->removeMethod('getAutoloaderConfig');
        }

        // add getAutoloaderConfig method with class map
        $code->addMethodFromGenerator(
            $this->generateGetAutoloaderConfigMethod(
                $destination, $moduleName
            )
        );

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'This file was generated by FrilleZFTool.',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $file->setDocBlock(
                new DocBlockGenerator(
                    'This file was generated by FrilleZFTool.',
                    null,
                    array(
                        $this->generatePackageTag($moduleName),
                        $this->generateSeeTag(),
                    )
                )
            );
        }

        // write module class
        if (!file_put_contents($moduleFile, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * Generate the action method
     *
     * @return MethodGenerator
     */
    protected function generateActionMethod($methodName)
    {
        // create method
        $method = new MethodGenerator();
        $method->setName($methodName);
        $method->setBody(
            'return new ViewModel();'
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $method->setDocBlock(
                new DocBlockGenerator(
                    'Method ' . $methodName,
                    'Please add a proper description for this action',
                    array(
                        $this->generateReturnTag('ViewModel'),
                    )
                )
            );
        }

        return $method;
    }

    /**
     * @param $objectClass
     * @param $serviceManagerClass
     *
     * @return MethodGenerator
     */
    protected function generateCreateServiceMethod($objectClass, $serviceManagerClass)
    {
        // init body
        $methodBody = array();

        // add service locator if needed
        if ($serviceManagerClass !== 'serviceLocator') {
            $methodBody[] = '// get service locator to fetch other services';
            $methodBody[] = '$serviceLocator = $' . $serviceManagerClass
                . '->getServiceLocator();';
            $methodBody[] = '';
        }

        // add class instantiation
        $methodBody[] = '// get all services that need to be injected';
        $methodBody[] = ';';
        $methodBody[] = '';
        $methodBody[] = '// instantiate class';
        $methodBody[] = '$controller = new ' . $objectClass . '();';
        $methodBody[] = '';
        $methodBody[] = '// inject all services ';
        $methodBody[] = ';';
        $methodBody[] = '';
        $methodBody[] = '// return instance of class';
        $methodBody[] = 'return $controller;';

        // create method
        $method = new MethodGenerator();
        $method->setName('createService');
        $method->setParameter(
            new ParameterGenerator(
                $serviceManagerClass,
                'ServiceLocatorInterface'
            )
        );
        $method->setBody(
            implode(AbstractGenerator::LINE_FEED, $methodBody)
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $method->setDocBlock(
                new DocBlockGenerator(
                    'Create service',
                    'Please add a proper description for this method',
                    array(
                        $this->generateParamTag(
                            'ServiceLocatorInterface $' . $serviceManagerClass
                        ),
                        $this->generateReturnTag($objectClass),
                    )
                )
            );
        }

        return $method;
    }

    /**
     * Generate the getAutoloaderConfig() method
     *
     * @return MethodGenerator
     */
    protected function generateGetAutoloaderConfigMethod(
        $classMap = false, $moduleName = false
    ) {
        // set array data
        $array = array(
            'Zend\Loader\StandardAutoloader' => array(
                'namespaces' => array(
                    '__NAMESPACE__ => __DIR__ . \'/src/\' . __NAMESPACE__',
                ),
            ),
        );

        // check for class map
        if ($classMap) {
            $array = array_merge(
                array(
                    'Zend\Loader\ClassMapAutoloader' => array(
                        '\'' . $moduleName . '\' => __DIR__ . \'/autoload_classmap.php\',',
                    ),
                ),
                $array
            );
        }

        // create method body
        $body = new ValueGenerator;
        $body->initEnvironmentConstants();
        $body->setValue($array);

        // create method
        $method = new MethodGenerator();
        $method->setName('getAutoloaderConfig');
        $method->setBody(
            'return ' . $body->generate() . ';'
            . AbstractGenerator::LINE_FEED
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $method->setDocBlock(
                new DocBlockGenerator(
                    'Get autoloader configuration',
                    null,
                    array(
                        $this->generateReturnTag('array'),
                    )
                )
            );
        }

        return $method;
    }

    /**
     * Generate the getConfig() method
     *
     * @return MethodGenerator
     */
    protected function generateGetConfigMethod()
    {
        // create method body
        $body = new ValueGenerator;
        $body->initEnvironmentConstants();
        $body->setValue(
            'include __DIR__ . \'/config/module.config.php\''
        );

        // create method
        $method = new MethodGenerator();
        $method->setName('getConfig');
        $method->setBody(
            'return ' . $body->generate() . ';'
            . AbstractGenerator::LINE_FEED
        );

        // add optional doc block
        if ($this->flagCreateDocBlocks) {
            $method->setDocBlock(
                new DocBlockGenerator(
                    'Get module configuration',
                    null,
                    array(
                        $this->generateReturnTag('array'),
                    )
                )
            );
        }

        return $method;
    }

    /**
     * Generate package tag
     *
     * @param $description
     *
     * @return Tag
     */
    protected function generatePackageTag($description)
    {
        return new Tag(
            array(
                'name'        => 'package',
                'description' => $description,
            )
        );
    }

    /**
     * Generate param tag
     *
     * @param $description
     *
     * @return Tag
     */
    protected function generateParamTag($description)
    {
        return new Tag(
            array(
                'name'        => 'param',
                'description' => $description,
            )
        );
    }

    /**
     * Generate return tag
     *
     * @param $description
     *
     * @return Tag
     */
    protected function generateReturnTag($description)
    {
        return new Tag(
            array(
                'name'        => 'return',
                'description' => $description,
            )
        );
    }

    /**
     * Generate see tag
     *
     * @return Tag
     */
    protected function generateSeeTag()
    {
        return new Tag(
            array(
                'name'        => 'see',
                'description' => 'https://github.com/RalfEggert/FrilleZFTool',
            )
        );
    }
}
