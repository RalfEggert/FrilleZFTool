<?php
namespace ZFTool\Generator;

use Zend\Code\Generator\AbstractGenerator;
use Zend\Code\Generator\ClassGenerator;
use Zend\Code\Generator\DocBlock\Tag;
use Zend\Code\Generator\DocBlockGenerator;
use Zend\Code\Generator\FileGenerator;
use Zend\Code\Generator\MethodGenerator;
use Zend\Code\Generator\Exception\RuntimeException as GeneratorException;
use Zend\Code\Generator\ValueGenerator;
use Zend\Code\Reflection\FileReflection;

/**
 * Class ModuleGenerator
 *
 * @package ZFTool\Generator
 */
class ModuleGenerator
{
    /**
     * Return the Module.php content
     *
     * @param  string $name
     *
     * @return string
     */
    public static function getModule($name)
    {
        return <<<EOD
<?php
namespace $name;

class Module
{
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }

    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\StandardAutoloader' => array(
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
                ),
            ),
        );
    }
}

EOD;
    }

    /**
     *
     * @param type $name
     *
     * @return type
     */
    public static function getModuleConfig($name)
    {
        return <<<EOD
<?php
return array(
);
EOD;
    }

    /**
     * @param $controllerClass
     * @param $moduleName
     * @param $controllerFilePath
     *
     * @return bool
     */
    public function createController(
        $controllerClass, $moduleName, $controllerFilePath
    ) {
        // create controller class with class generator
        $code = new ClassGenerator();
        $code->setDocBlock(
            new DocBlockGenerator(
                'Class ' . $controllerClass,
                'Please add a proper description for the ' . $controllerClass,
                array(
                    new Tag(
                        array(
                            'name'        => 'package',
                            'description' => $moduleName,
                        )
                    ),
                )
            )
        );
        $code->setNamespaceName($moduleName . '\Controller');
        $code->addUse('Zend\Mvc\Controller\AbstractActionController');
        $code->addUse('Zend\View\Model\ViewModel');
        $code->setName($controllerClass);
        $code->setExtendedClass('AbstractActionController');
        $code->addMethod(
            'indexAction',
            array(),
            MethodGenerator::FLAG_PUBLIC,
            'return new ViewModel();',
            new DocBlockGenerator(
                'Method indexAction',
                'Please add a proper description for this action',
                array(
                    new Tag(
                        array(
                            'name'        => 'return',
                            'description' => 'ViewModel',
                        )
                    ),
                )
            )
        );

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);
        $file->setDocBlock(
            new DocBlockGenerator(
                null,
                'This file was generated by ZFTool.',
                array(
                    new Tag(
                        array(
                            'name'        => 'package',
                            'description' => $moduleName,
                        )
                    ),
                    new Tag(
                        array(
                            'name'        => 'see',
                            'description' => 'https://github.com/RalfEggert/ZFTool',
                        )
                    ),
                )
            )
        );

        // write controller class
        if (!file_put_contents($controllerFilePath, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * @param $actionMethod
     * @param $controllerKey
     * @param $moduleName
     * @param $controllerFilePath
     *
     * @return bool
     * @throws \Zend\Code\Generator\Exception
     */
    public function updateController(
        $actionMethod, $controllerKey, $moduleName, $controllerFilePath
    ) {
        // get file and class reflection
        $fileReflection  = new FileReflection(
            $controllerFilePath,
            true
        );
        $classReflection = $fileReflection->getClass($controllerKey);

        // setup class generator with reflected class
        $code = ClassGenerator::fromReflection($classReflection);

        // check for action method
        if ($code->hasMethod($actionMethod)) {
            throw new GeneratorException(
                'New action already exists within controller'
            );
        }

        // fix namespace usage
        $code->addUse('Zend\Mvc\Controller\AbstractActionController');
        $code->addUse('Zend\View\Model\ViewModel');
        $code->setExtendedClass('AbstractActionController');

        // add new action method
        $code->addMethod(
            $actionMethod,
            array(),
            MethodGenerator::FLAG_PUBLIC,
            'return new ViewModel();',
            new DocBlockGenerator(
                'Method ' . $actionMethod,
                'Please add a proper description for this action',
                array(
                    new Tag(
                        array(
                            'name'        => 'return',
                            'description' => 'ViewModel',
                        )
                    ),
                )
            )
        );

        // create file with file generator
        $file = new FileGenerator();
        $file->setClass($code);
        $file->setDocBlock(
            new DocBlockGenerator(
                null,
                'Configuration file was generated by ZFTool.',
                array(
                    new Tag(
                        array(
                            'name' => 'package',
                            'description' => $moduleName,
                        )
                    ),
                    new Tag(
                        array(
                            'name'        => 'see',
                            'description' => 'https://github.com/RalfEggert/ZFTool',
                        )
                    ),
                )
            )
        );

        // write controller class
        if (!file_put_contents($controllerFilePath, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * @param array $configData
     * @param       $configFile
     *
     * @return bool
     */
    public function updateConfiguration(array $configData, $configFile)
    {
        // set old file
        $oldFile = str_replace('.php', '.old', $configFile);

        // copy to old file
        copy($configFile, $oldFile);

        // create config array
        $array = new ValueGenerator();
        $array->initEnvironmentConstants();
        $array->setValue($configData);
        $array->setArrayDepth(0);

        // create file with file generator
        $file = new FileGenerator();
        $file->setBody(
            'return ' . $array->generate() . ';' . AbstractGenerator::LINE_FEED
        );
        $file->setDocBlock(
            new DocBlockGenerator(
                'Configuration file generated by ZFTool',
                'The previous configuration file is stored in ' . $oldFile,
                array(
                    new Tag(
                        array(
                            'name'        => 'see',
                            'description' => 'https://github.com/RalfEggert/ZFTool',
                        )
                    ),
                )
            )
        );

        // write application configuration
        if (!file_put_contents($configFile, $file->generate())) {
            return false;
        }

        return true;
    }

    /**
     * @param $actionName
     * @param $controllerName
     * @param $moduleName
     * @param $viewPath
     *
     * @return bool
     */
    public function createViewScript(
        $actionName, $controllerName, $moduleName, $viewFile
    ) {
        // setup view script body
        $viewBody   = array();
        $viewBody[] = '?>';
        $viewBody[] = '<div class="jumbotron">';
        $viewBody[] = '<h1>Action "' . $actionName . '"</h1>';
        $viewBody[] = '<p>Created for Controller "' . $controllerName
            . '" in Module "' . $moduleName . '"</p>';
        $viewBody[] = '</div>';

        // create file with file generator
        $file = new FileGenerator();
        $file->setBody(
            implode(AbstractGenerator::LINE_FEED, $viewBody)
        );
        $file->setDocBlock(
            new DocBlockGenerator(
                'View script generated by ZFTool',
                null,
                array(
                    new Tag(
                        array(
                            'name' => 'package',
                            'description' => $moduleName,
                        )
                    ),
                )
            )
        );

        // write view script
        if (!file_put_contents($viewFile, $file->generate())) {
            return false;
        }

        return true;
    }
}
